from telegram import Update
from telegram.ext import ContextTypes
from logic.recommendation import recommend_bet
from context.session import session_manager
from utils.parser import parse_board
from logic.equity import calculate_equity_and_outs
from logic.strategy_tip import get_strategy_tip

async def handle_river(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = session_manager.get(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–∏
    if not session.hand:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ä—É–∫—É (PF).")
        return

    # –ü–∞—Ä—Å–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –±–æ—Ä–¥–∞
    board = parse_board(update.message.text)
    if not board:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–æ—Ä–¥–∞. –ü—Ä–∏–º–µ—Ä: RIV: 2h 7d Jc 9s Ah")
        return

    session.add_board_cards(board)

    # –°—á–∏—Ç–∞–µ–º equity, outs –∏ –¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    equity, outs = calculate_equity_and_outs(
        session.hand, session.board, session.multi_count
    )
    bet = recommend_bet(equity, 'river', session.is_multi, session.position)
    tip = get_strategy_tip(session.opponent_type, 'river')

    await update.message.reply_text(
        f"üìä Equity: {equity}%\n"
        f"üéØ Outs: {outs}\n"
        f"üí∞ Bet: {bet}\n"
        f"üß† {tip}"
    )
